library(cluster)
# anisotropic
kernel_function <- function(x, X_mat, l = 0.1){
  if (is.null(dim(x)))                   # allow x as a plain vector
    x <- matrix(x, nrow = 1)
  
  d <- ncol(X_mat)
  if (length(l) == 1L)                   # isotropic â‡’ recycle scalar
    l <- rep(l, d)
  if (length(l) != d)
    stop("length(l) must be either 1 or ncol(X_mat)")
  
  scaled_diffs <- sweep(X_mat, 2, x) 
  scaled_diffs <- sweep(scaled_diffs, 2, l, FUN = "/")
  distsq <- rowSums(scaled_diffs^2)
  
  return(exp(-0.5 * distsq))
}


delta_i <- function(K_i, y, K_I = NULL, alpha_I = NULL, sigma2 = 1, tilde_ki = NULL, K_ii = 1) {
  n <- length(y)
  
  if(length(alpha_I) == 0) {
    pred <- rep(0, n)
    tilde_term <- 0
  } else {
    pred <- as.numeric(crossprod(alpha_I, K_I))  # length-n prediction vector
    tilde_term <- sum(tilde_ki * alpha_I)
  }
  
  resid <- y - pred  # length-n
  
  numer <- sum(K_i * resid) - sigma2 * tilde_term
  denom <- sigma2 * K_ii + sum(K_i^2)
  
  alpha_star <- numer / denom
  Delta <- 0.5 * alpha_star^2 * denom
  list(Delta = Delta, alpha_star = alpha_star)
}

cheap_lengthscale <- function(X, frac = 0.05){
  n  <- nrow(X)
  d  <- ncol(X)
  r  <- min(500, max(30, round(frac * n)))
  idx <- sample(n, r)
  
  Xsub <- X[idx, , drop = FALSE]
  ell <- numeric(d)
  for (j in seq_len(d)) {
    v  <- Xsub[, j]
    diffs <- abs(outer(v, v, "-"))
    ell[j] <- median( diffs[upper.tri(diffs, diag = FALSE)])
  }
  ell[ell == 0] <- 1e-6
  return(ell)
}

matching_pursuit_gp <- function(X, y, m=NULL, 
                                cache_size=100, 
                                refresh_rate=0.59, 
                                sig2=NULL, ell=NULL,
                                loops=2, 
                                visualize=FALSE, ...){
  if(is.null(sig2)){
    sig2 <- var(y)
  }
  if(is.null(ell)){
    ell <- cheap_lengthscale(X)
  }
  
  n <- length(y)
  if(is.null(m)){
    m <- min(1000, max(200, floor(sqrt(n))))
  }
  cache_size <- min(cache_size, m/2)
  kappa <- ceiling(cache_size * refresh_rate)
  
  
  # Sample initial cache
  SoD_set <- NULL
  tmp_set <- cluster::pam(X, 
                          k=cache_size, 
                          pamonce=6, 
                          keep.diss=FALSE, keep.data=FALSE)$id.med
  
  # Calculate the full kernel row K_i for each of the chosen i's (in tmp_set)
  K_cache <- matrix(NA, nrow=cache_size, ncol=n)
  for(j in seq_along(tmp_set)){
    K_cache[j,] <- kernel_function(X[tmp_set[j],,drop=FALSE], X)
  }
  
  # Store SoD K matrix
  K_SoD <- matrix(NA, nrow=m, ncol=n)
  
  cnt <- 0
  alpha_I <- NULL
  while(cnt < m){
    # Evaluate criterion for each c
    Delta_crit <- alpha_star_i <- rep(NA, cache_size)
    for(j in seq_along(tmp_set)) {
      i <- tmp_set[j]
      K_i <- K_cache[j, ]
      if(cnt == 0) {
        K_I <- NULL
        tilde_ki <- numeric(0)
      } else {
        K_I <- K_SoD[1:cnt, , drop=FALSE]
        tilde_ki <- K_SoD[1:cnt, i, drop=TRUE]
      }
      K_ii <- 1 # K_i[i] # Or set as appropriate
      res <- delta_i(K_i, y, K_I, alpha_I, sig2, tilde_ki, K_ii)
      Delta_crit[j] <- res$Delta
      alpha_star_i[j] <- res$alpha_star
    }
    
    # Put the best one in the set
    cnt <- cnt + 1
    best_index <- which.max(Delta_crit)
    SoD_set <- c(SoD_set, tmp_set[best_index])
    K_SoD[cnt,] <- K_cache[best_index,,drop=FALSE]
    alpha_I <- c(alpha_I, alpha_star_i[best_index])
    
    # Update cache
    Delta_crit[best_index] <- -Inf
    ord <- order(Delta_crit)            # Lowest values first
    tmp_set <- tmp_set[ord]             # Re-order tmp_set
    K_cache <- K_cache[ord,,drop=FALSE] # Re-order rows of the cache
    
    # Sample new indices
    candidates <- setdiff(1:n, union(tmp_set, SoD_set))
    new_ind <- sample(candidates, kappa)
    tmp_set[1:kappa] <- new_ind
    
    # Calculate new K_i values
    for(j in seq_len(kappa)){
      K_cache[j,] <- kernel_function(X[tmp_set[j],,drop=FALSE], X)
    }
    
    if(visualize){
      pts <- rep(1, n)
      col <- rep("grey", n)
      pts[tmp_set] <- 16
      col[tmp_set] <- "black"
      pts[SoD_set] <- 15
      col[SoD_set] <- "orange"
      plot(X[,1:2], pch=pts, col=col, main=paste0("Loops left:", loops))
      Sys.sleep(0.2)
    }
  }
  
  # Fit GP  
  X_sub <- X[SoD_set,,drop=FALSE]
  y_sub <- y[SoD_set]
  fit <- GP_fit(X_sub, y_sub, 
                corr=list(type="exponential", power=2),
                ...)
  fit$ell <- 10^(-fit$beta/2) * 0.70711
  
  # Either iterate or return
  if(loops == 1){
    return(fit)
  }else{
    return(matching_pursuit_gp(X, y, m, cache_size, refresh_rate, 
                               fit$sig2, fit$ell, loops-1, # Recursive stuff
                               visualize, ...))
  }
}




